<%- include('../../partials/header') %>

<div class="mb-4">
  <h2><i class="fas fa-edit me-2"></i>Edit Package</h2>
  <p class="text-muted">Update package information for <%= packageItem.destination %></p>
</div>

<div class="card shadow mb-4">
  <div class="card-header py-3">
    <h6 class="m-0 font-weight-bold text-primary">Package Details</h6>
  </div>
  <div class="card-body">
    <form id="packageEditForm">
      <div class="row">
        <div class="col-md-6 mb-3">
          <label for="destination" class="form-label">Destination</label>
          <input type="text" class="form-control" id="destination" name="destination" value="<%= packageItem.destination %>" required>
        </div>
        <div class="col-md-6 mb-3">
          <label for="category" class="form-label">Category</label>
          <select class="form-select" id="category" name="category" required>
            <option value="international" <%= packageItem.category === 'international' ? 'selected' : '' %>>International</option>
            <option value="local" <%= packageItem.category === 'local' ? 'selected' : '' %>>Local</option>
            <option value="fixedDeparture" <%= packageItem.category === 'fixedDeparture' ? 'selected' : '' %>>Fixed Departure</option>
          </select>
        </div>
      </div>
      
      <div class="row">
        <div class="col-md-6 mb-3">
          <label for="duration" class="form-label">Duration</label>
          <input type="number" class="form-control" id="duration" name="duration" value="<%= packageItem.duration %>" required>
        </div>
        <div class="col-md-6 mb-3">
          <label for="price" class="form-label">Price</label>
          <div class="input-group">
            <span class="input-group-text">$</span>
            <input type="number" step="0.01" class="form-control" id="price" name="price" value="<%= typeof packageItem.price === 'string' ? packageItem.price.replace('$', '') : packageItem.price %>" required>
          </div>
        </div>
      </div>
      
      <div class="mb-3">
        <label for="rating" class="form-label">Rating (0-5)</label>
        <input type="number" class="form-control" id="rating" name="rating" min="0" max="5" step="0.1" value="<%= packageItem.rating %>" required>
      </div>
      
      <!-- Current Images Section -->
      <div class="mb-4">
        <label class="form-label">Current Images</label>
        <div class="row g-3" id="current-images-container">
          <% packageItem.images.forEach(function(image, index) { %>
            <div class="col-md-3 col-6">
              <div class="card h-100">
                <img src="<%= image %>" 
                     class="card-img-top" alt="<%= packageItem.destination %> image" 
                     style="height: 150px; object-fit: cover;">
                <div class="card-body p-2">
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="keep_image_<%= index %>" 
                           name="keep_images" value="<%= image %>" checked>
                    <label class="form-check-label" for="keep_image_<%= index %>">
                      Keep this image
                    </label>
                  </div>
                </div>
              </div>
            </div>
          <% }); %>
        </div>
        <div class="form-text">Uncheck images you want to remove</div>
      </div>
      
      <!-- New Images Upload Section -->
      <div class="mb-3">
        <label for="new_images" class="form-label">Upload New Images</label>
        <input type="file" class="form-control" id="new_images" name="new_images" multiple accept="image/*">
        <div class="form-text">Upload up to 5 new images (JPG, PNG, WEBP)</div>
      </div>
      
      <!-- Image Preview Area -->
      <div id="image-preview" class="mb-3 row g-3 d-none">
        <!-- Preview images will be displayed here via JavaScript -->
      </div>
      
      <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <textarea class="form-control" id="description" name="description" rows="4" required><%= packageItem.description %></textarea>
      </div>

      <div id="statusMessage" class="alert d-none mb-3"></div>
      
      <div class="d-flex justify-content-between">
        <a href="/admin/packages/<%= packageItem._id %>" class="btn btn-secondary">
          <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <button type="submit" id="submitBtn" class="btn btn-primary">
          <i class="fas fa-save me-1"></i> Update Package
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Image Preview and Form Submission JavaScript -->
<script>
  // Image preview functionality
  document.getElementById('new_images').addEventListener('change', function(event) {
    const preview = document.getElementById('image-preview');
    preview.innerHTML = ''; // Clear existing previews
    
    if (this.files && this.files.length > 0) {
      preview.classList.remove('d-none');
      
      Array.from(this.files).forEach(function(file, index) {
        if (!file.type.match('image.*')) return;
        
        const col = document.createElement('div');
        col.className = 'col-md-3 col-6';
        
        const card = document.createElement('div');
        card.className = 'card h-100';
        
        const img = document.createElement('img');
        img.className = 'card-img-top';
        img.style.height = '150px';
        img.style.objectFit = 'cover';
        img.alt = 'New image preview';
        
        const cardBody = document.createElement('div');
        cardBody.className = 'card-body p-2';
        
        const cardText = document.createElement('p');
        cardText.className = 'card-text small mb-0';
        cardText.textContent = file.name;
        
        // Use FileReader to display image preview
        const reader = new FileReader();
        reader.onload = function(e) {
          img.src = e.target.result;
        };
        reader.readAsDataURL(file);
        
        cardBody.appendChild(cardText);
        card.appendChild(img);
        card.appendChild(cardBody);
        col.appendChild(card);
        preview.appendChild(col);
      });
    } else {
      preview.classList.add('d-none');
    }
  });

  // Form submission handler
  document.getElementById('packageEditForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const statusMsg = document.getElementById('statusMessage');
    statusMsg.className = 'alert d-none mb-3';
    
    // Disable submit button and show loading state
    const submitBtn = document.getElementById('submitBtn');
    const originalBtnText = submitBtn.innerHTML;
    submitBtn.disabled = true;
    
    try {
      // Gather existing images that user wants to keep
      const keptImages = [];
      const checkboxes = document.querySelectorAll('input[name="keep_images"]:checked');
      checkboxes.forEach(checkbox => {
        keptImages.push(checkbox.value);
      });
      
      // Upload new images to Cloudinary if any were selected
      const newImageUrls = [];
      const fileInput = document.getElementById('new_images');
      
      if (fileInput.files.length > 0) {
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Uploading images...';
        
        // Get cloudinary upload parameters from server
        const configResponse = await fetch('/admin/packages/api/cloudinary-config');
        if (!configResponse.ok) throw new Error('Failed to get upload configuration');
        const config = await configResponse.json();
        
        for (const file of fileInput.files) {
          const cloudinaryData = new FormData();
          cloudinaryData.append('file', file);
          cloudinaryData.append('upload_preset', config.uploadPreset);
          cloudinaryData.append('api_key', config.apiKey);
          
          const response = await fetch(`https://api.cloudinary.com/v1_1/${config.cloudName}/image/upload`, {
            method: 'POST',
            body: cloudinaryData
          });
          
          if (!response.ok) throw new Error('Image upload failed');
          const data = await response.json();
          if (data.secure_url) {
            newImageUrls.push(data.secure_url);
          } else {
            throw new Error('Failed to get image URL');
          }
        }
      }
      
      // Combine kept images with new images
      const allImages = [...keptImages, ...newImageUrls];
      
      // Check if we have at least one image
      if (allImages.length === 0) {
        statusMsg.className = 'alert alert-danger mb-3';
        statusMsg.textContent = 'At least one image is required';
        submitBtn.innerHTML = originalBtnText;
        submitBtn.disabled = false;
        return;
      }
      
      // Prepare the package data for update
      const packageData = {
        destination: document.getElementById('destination').value,
        category: document.getElementById('category').value,
        duration: document.getElementById('duration').value,
        price: document.getElementById('price').value,
        rating: document.getElementById('rating').value,
        description: document.getElementById('description').value,
        images: allImages
      };
      
      submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Updating package...';
      
      // Send data to server as JSON
      const response = await fetch('/admin/packages/<%= packageItem._id %>?_method=PUT', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(packageData)
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to update package');
      }
      
      // Success - redirect to view page
      statusMsg.className = 'alert alert-success mb-3';
      statusMsg.textContent = 'Package updated successfully. Redirecting...';
      setTimeout(() => {
        window.location.href = '/admin/packages/<%= packageItem._id %>';
      }, 1500);
      
    } catch (error) {
      console.error('Error:', error);
      statusMsg.className = 'alert alert-danger mb-3';
      statusMsg.textContent = 'An error occurred: ' + error.message;
      submitBtn.innerHTML = originalBtnText;
      submitBtn.disabled = false;
    }
  });
</script>

<%- include('../../partials/footer') %>