<%- include('../../partials/header') %>

<div class="mb-4">
  <h2><i class="fas fa-plus-circle me-2"></i>Add New Package</h2>
  <p class="text-muted">Create a new travel package</p>
</div>

<div class="card shadow mb-4">
  <div class="card-header py-3">
    <h6 class="m-0 font-weight-bold text-primary">Package Details</h6>
  </div>
  <div class="card-body">
    <form id="packageForm" enctype="multipart/form-data">
      <!-- Form fields for package details -->

      <div class="row">
        <div class="col-md-6 mb-3">
          <label for="destination" class="form-label">Destination</label>
          <input type="text" class="form-control" id="destination" name="destination" required>
        </div>
        <div class="col-md-6 mb-3">
          <label for="category" class="form-label">Category</label>
          <select class="form-select" id="category" name="category" required>
            <option value="" selected disabled>Select category</option>
            <option value="international">International</option>
            <option value="local">Domestic</option>
            <option value="fixedDeparture">Fixed Departure</option>
          </select>
        </div>
      </div>

      <div class="row">
        <div class="col-md-6 mb-3">
          <label for="price" class="form-label">Price</label>
          <input type="number" class="form-control" id="price" name="price" required>
        </div>
        <div class="col-md-6 mb-3">
          <label for="rating" class="form-label">Rating</label>
          <input type="number" class="form-control" id="rating" name="rating" min="1" max="5" step="0.1" required>
        </div>
        <div class="col-md-6 mb-3">
          <label for="pax" class="form-label">Pax</label>
          <input type="text" class="form-control" id="pax" name="pax" required>
        </div>        
      </div>
      <div class="col-md-6 mb-3">
        <label for="duration" class="form-label">Duration</label>
        <input type="text" class="form-control" id="duration" name="duration" required>
        <div class="form-text">Enter the duration in days</div>
      </div>

      <div class="mb-3">
        <label for="package_images" class="form-label">Package Images</label>
        <input type="file" class="form-control" id="package_images" name="package_images" multiple accept="image/*" required>
        <div class="form-text">Upload up to 5 images. Supported formats: JPG, JPEG, PNG, WEBP</div>
      </div>

      <div id="image-preview" class="mb-3 row g-2 d-none">
        <!-- Preview images will appear here -->
      </div>

      <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <textarea class="form-control" id="description" name="description" rows="4" required></textarea>
      </div>

      <div id="statusMessage" class="alert d-none mb-3"></div>

      <div class="d-flex justify-content-between">
        <a href="/admin/packages" class="btn btn-secondary">
          <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <button type="submit" id="submitBtn" class="btn btn-primary">
          <i class="fas fa-save me-1"></i> Create Package
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  // Image preview functionality
  document.getElementById('package_images').addEventListener('change', function(event) {
    const preview = document.getElementById('image-preview');
    preview.innerHTML = ''; // Clear existing previews
    preview.classList.remove('d-none');
    
    if (this.files) {
      Array.from(this.files).forEach(file => {
        if (!file.type.match('image.*')) return;
        
        const col = document.createElement('div');
        col.className = 'col-md-3 col-6';
        
        const card = document.createElement('div');
        card.className = 'card h-100';
        
        const img = document.createElement('img');
        img.className = 'card-img-top';
        img.style.height = '150px';
        img.style.objectFit = 'cover';
        
        const reader = new FileReader();
        reader.onload = e => img.src = e.target.result;
        reader.readAsDataURL(file);
        
        card.appendChild(img);
        col.appendChild(card);
        preview.appendChild(col);
      });
    }
  });
  
  // Form submission handler
  document.getElementById('packageForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const statusMsg = document.getElementById('statusMessage');
    statusMsg.className = 'alert d-none mb-3';
    
    const fileInput = document.getElementById('package_images');
    if (fileInput.files.length === 0) {
      statusMsg.className = 'alert alert-danger mb-3';
      statusMsg.textContent = 'Please select at least one image';
      return;
    }
    
    // Disable submit button and show loading state
    const submitBtn = document.getElementById('submitBtn');
    const originalBtnText = submitBtn.innerHTML;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Uploading images...';
    submitBtn.disabled = true;
    
    try {
      // Get cloudinary upload parameters from server
      const configResponse = await fetch('/admin/packages/api/cloudinary-config');
      if (!configResponse.ok) throw new Error('Failed to get upload configuration');
      const config = await configResponse.json();
      
      // Upload each image to Cloudinary
      const imageUrls = [];
      for (const file of fileInput.files) {
        const cloudinaryData = new FormData();
        cloudinaryData.append('file', file);
        cloudinaryData.append('upload_preset', config.uploadPreset);
        cloudinaryData.append('api_key', config.apiKey);
        
        const response = await fetch(`https://api.cloudinary.com/v1_1/${config.cloudName}/image/upload`, {
          method: 'POST',
          body: cloudinaryData
        });
        
        if (!response.ok) throw new Error('Image upload failed');
        const data = await response.json();
        if (data.secure_url) {
          imageUrls.push(data.secure_url);
        } else {
          throw new Error('Failed to get image URL');
        }
      }
      
      // Prepare the package data
      const packageData = {
  destination: document.getElementById('destination').value,
  category: document.getElementById('category').value,
  duration: document.getElementById('duration').value,
  price: document.getElementById('price').value,
  rating: document.getElementById('rating').value,
  pax: document.getElementById('pax').value, // <-- New field added here
  description: document.getElementById('description').value,
  images: imageUrls
};

      
      submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Creating package...';
      
      // Send data to server as JSON
      const response = await fetch('/admin/packages', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(packageData)
      });
      
      const result = await response.json();
      
      if (result.redirect || result.redirected) {
        window.location.href = result.redirect || '/admin/packages';
      } else if (!response.ok) {
        throw new Error(result.error || 'Failed to create package');
      } else {
        statusMsg.className = 'alert alert-success mb-3';
        statusMsg.textContent = 'Package created successfully. Redirecting...';
        setTimeout(() => {
          window.location.href = '/admin/packages';
        }, 1500);
      }
    } catch (error) {
      console.error('Error:', error);
      statusMsg.className = 'alert alert-danger mb-3';
      statusMsg.textContent = 'An error occurred: ' + error.message;
      submitBtn.innerHTML = originalBtnText;
      submitBtn.disabled = false;
    }
  });
</script>

<%- include('../../partials/footer') %>